---

- name: Create ec2 instances
  hosts:
    - 127.0.0.1
  connection: local

  vars:
    number_of_instances: 1

  tasks:
    - name: Check VPC id fact is available
      fail:
        msg: "VPC id has not been defined"
      when: vpc_id|default(false) == false

    - name: Check subnet id fact available
      fail:
        msg: "Subnet id has not been defined"
      when: subnet_id|default(false) == false

    - name: Create instance security group
      local_action:
        module: ec2_group
        name: "ec2 instance security group"
        description: "ec2 instance security group"
        vpc_id: "{{ vpc_id }}"
        region: us-east-1
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
      register: instance_security_group

    - name: "Create {{ number_of_instances }} ec2 instances within VPC"
      local_action:
        module: ec2
        assign_public_ip: true
        region: us-east-1
        key_name: craig.marvelley@gmail.com
        group_id: "{{ instance_security_group.group_id }}"
        instance_type: t2.micro
        image:  ami-9eaa1cf6
        wait: yes
        vpc_subnet_id: "{{ subnet_id }}"
        instance_tags:
          name: Webserver
        exact_count: "{{ number_of_instances }}"
        count_tag:
          name: Webserver
      register: launched_instances

    - name: Wait until SSH is available
      local_action: wait_for host={{ item.public_ip }} port=22 delay=60 timeout=320 state=started
      when: launched_instances.instances
      with_items: launched_instances.instances

    - name: Pause a few seconds to ensure SSH port is open
      when: launched_instances.instances
      pause: seconds=2

    - name: Load hosts into a group so we can run playbooks against them
      add_host: hostname={{ item.public_ip }} groupname=ec2_instances
      when: launched_instances.instances
      with_items: launched_instances.instances

- name: Provision ec2 instances
  hosts: ec2_instances
  sudo: true
  gather_facts: true

  tasks:
    - name: Install Apache2
      apt: pkg=apache2 state=installed


  roles:
    - { role: php-fpm }



















